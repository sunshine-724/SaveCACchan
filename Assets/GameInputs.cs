//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.6.3
//     from Assets/GameInputs.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @GameInputs: IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @GameInputs()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""GameInputs"",
    ""maps"": [
        {
            ""name"": ""Player1"",
            ""id"": ""8b2a8529-af44-4df1-9ce7-bc490213be83"",
            ""actions"": [
                {
                    ""name"": ""OnMove"",
                    ""type"": ""Value"",
                    ""id"": ""452d5837-7cd1-4f2e-b3ad-f3820ceaf5e1"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""OnJump"",
                    ""type"": ""Button"",
                    ""id"": ""1a89076c-023d-41ec-8358-4ee8a1cf34c6"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Attack"",
                    ""type"": ""Button"",
                    ""id"": ""9f941b20-a8b8-42e9-a0ff-342814ad62c3"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""c6bea922-93f0-4b82-ab9b-c00adc2dbc9d"",
                    ""path"": ""<Gamepad>/leftStick"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""OnMove"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""d12f5dd8-933d-4b3c-aae4-58e0e6a5cae9"",
                    ""path"": ""<Gamepad>/buttonNorth"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""OnJump"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""320189b0-9b3b-4e03-aaf4-02ad1de01ddc"",
                    ""path"": ""<Gamepad>/buttonWest"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Attack"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        },
        {
            ""name"": ""Player2_support"",
            ""id"": ""4b026d7f-4ae8-4015-8221-9d6f833086de"",
            ""actions"": [
                {
                    ""name"": ""putFooting"",
                    ""type"": ""Button"",
                    ""id"": ""7793e188-f4bf-4bdc-b46b-7cea8a22859b"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""changeKindOfFooting"",
                    ""type"": ""Button"",
                    ""id"": ""e7c67352-d2c1-4ee4-b3b5-a7c4d0546a13"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""changeLengthOfFooting"",
                    ""type"": ""Button"",
                    ""id"": ""053ccf85-ba92-438b-947d-1889ebcffb1d"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""changeKindOfWeapon"",
                    ""type"": ""Button"",
                    ""id"": ""e7892b52-0eaf-48aa-9379-fa68d9ce2bf1"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""507ff07f-9cbb-4d95-bd84-a8c9000962ca"",
                    ""path"": ""<Keyboard>/space"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""putFooting"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""e48d8d95-2e49-4e52-989c-6daa57c99237"",
                    ""path"": ""<Keyboard>/alt"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""changeKindOfFooting"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""41bbf51c-3e08-443d-be95-ad78fb306450"",
                    ""path"": ""<Mouse>/leftButton"",
                    ""interactions"": ""Press(behavior=2)"",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""changeLengthOfFooting"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""a3a9bed4-be5f-491a-8547-a12efd2083b2"",
                    ""path"": ""<Keyboard>/leftMeta"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""changeKindOfWeapon"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""356f9c2c-be11-4a04-8692-f2a8c07ba6c1"",
                    ""path"": ""<Keyboard>/rightMeta"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""changeKindOfWeapon"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        },
        {
            ""name"": ""Player1(debug)"",
            ""id"": ""5c5c5b58-ea06-4dfc-92f2-7710cd5fa26e"",
            ""actions"": [
                {
                    ""name"": ""OnRightMove"",
                    ""type"": ""Button"",
                    ""id"": ""b0fc1418-2211-4bd0-ac9d-6e6b32bdcbf5"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""OnLeftMove"",
                    ""type"": ""Button"",
                    ""id"": ""69a0da0c-aba0-4f21-bf52-ac94261b64a4"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""OnJump"",
                    ""type"": ""Button"",
                    ""id"": ""6f3d19af-4ac6-4179-a15b-f69b66d97990"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Attack"",
                    ""type"": ""Button"",
                    ""id"": ""2cf8824c-0c28-461c-809a-5a2233f49835"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""692c19ed-089c-47a9-823f-ecf9f50e12f4"",
                    ""path"": ""<Keyboard>/d"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""OnRightMove"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""99c911b8-b36b-46a5-9159-ed7b91c71433"",
                    ""path"": ""<Keyboard>/a"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""OnLeftMove"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""c5d59c35-4ecb-4fff-9a85-91e730cea2e0"",
                    ""path"": ""<Keyboard>/w"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""OnJump"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""b20e8dde-bb08-41e6-8516-4a2be7f57dc3"",
                    ""path"": ""<Keyboard>/enter"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Attack"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        },
        {
            ""name"": ""Ending"",
            ""id"": ""aefeb9d4-85a4-4ff1-bfe5-504396bb4199"",
            ""actions"": [
                {
                    ""name"": ""ClickToMoveTitle"",
                    ""type"": ""Button"",
                    ""id"": ""68c78ea9-dd2b-48c5-8b5d-df3f8b585597"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""44dac26e-641f-4e2a-86a5-2b93ec10e47c"",
                    ""path"": ""<Mouse>/leftButton"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""ClickToMoveTitle"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        },
        {
            ""name"": ""Player1_joy"",
            ""id"": ""44354592-1d92-4250-8b8a-0cb104f99599"",
            ""actions"": [
                {
                    ""name"": ""OnMove"",
                    ""type"": ""Button"",
                    ""id"": ""8704fb7e-a9e4-4806-b455-4a1445f993d5"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""OnJump"",
                    ""type"": ""Button"",
                    ""id"": ""a5ba890e-5a5a-419f-a295-9cd21c366cf6"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Attack"",
                    ""type"": ""Button"",
                    ""id"": ""873ea5c2-a1ec-4841-a710-32ebbdee8ab6"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""e3d4c433-7bbd-45d2-8a33-12252a479861"",
                    ""path"": ""<Gamepad>/leftStick/right"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""OnMove"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""3124ca08-cc90-4098-a49f-60422a286d0d"",
                    ""path"": ""<Gamepad>/buttonNorth"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""OnJump"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""046b2ffd-b481-4721-afd7-546510143d95"",
                    ""path"": ""<Gamepad>/buttonWest"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Attack"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": []
}");
        // Player1
        m_Player1 = asset.FindActionMap("Player1", throwIfNotFound: true);
        m_Player1_OnMove = m_Player1.FindAction("OnMove", throwIfNotFound: true);
        m_Player1_OnJump = m_Player1.FindAction("OnJump", throwIfNotFound: true);
        m_Player1_Attack = m_Player1.FindAction("Attack", throwIfNotFound: true);
        // Player2_support
        m_Player2_support = asset.FindActionMap("Player2_support", throwIfNotFound: true);
        m_Player2_support_putFooting = m_Player2_support.FindAction("putFooting", throwIfNotFound: true);
        m_Player2_support_changeKindOfFooting = m_Player2_support.FindAction("changeKindOfFooting", throwIfNotFound: true);
        m_Player2_support_changeLengthOfFooting = m_Player2_support.FindAction("changeLengthOfFooting", throwIfNotFound: true);
        m_Player2_support_changeKindOfWeapon = m_Player2_support.FindAction("changeKindOfWeapon", throwIfNotFound: true);
        // Player1(debug)
        m_Player1debug = asset.FindActionMap("Player1(debug)", throwIfNotFound: true);
        m_Player1debug_OnRightMove = m_Player1debug.FindAction("OnRightMove", throwIfNotFound: true);
        m_Player1debug_OnLeftMove = m_Player1debug.FindAction("OnLeftMove", throwIfNotFound: true);
        m_Player1debug_OnJump = m_Player1debug.FindAction("OnJump", throwIfNotFound: true);
        m_Player1debug_Attack = m_Player1debug.FindAction("Attack", throwIfNotFound: true);
        // Ending
        m_Ending = asset.FindActionMap("Ending", throwIfNotFound: true);
        m_Ending_ClickToMoveTitle = m_Ending.FindAction("ClickToMoveTitle", throwIfNotFound: true);
        // Player1_joy
        m_Player1_joy = asset.FindActionMap("Player1_joy", throwIfNotFound: true);
        m_Player1_joy_OnMove = m_Player1_joy.FindAction("OnMove", throwIfNotFound: true);
        m_Player1_joy_OnJump = m_Player1_joy.FindAction("OnJump", throwIfNotFound: true);
        m_Player1_joy_Attack = m_Player1_joy.FindAction("Attack", throwIfNotFound: true);
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }

    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }

    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // Player1
    private readonly InputActionMap m_Player1;
    private List<IPlayer1Actions> m_Player1ActionsCallbackInterfaces = new List<IPlayer1Actions>();
    private readonly InputAction m_Player1_OnMove;
    private readonly InputAction m_Player1_OnJump;
    private readonly InputAction m_Player1_Attack;
    public struct Player1Actions
    {
        private @GameInputs m_Wrapper;
        public Player1Actions(@GameInputs wrapper) { m_Wrapper = wrapper; }
        public InputAction @OnMove => m_Wrapper.m_Player1_OnMove;
        public InputAction @OnJump => m_Wrapper.m_Player1_OnJump;
        public InputAction @Attack => m_Wrapper.m_Player1_Attack;
        public InputActionMap Get() { return m_Wrapper.m_Player1; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(Player1Actions set) { return set.Get(); }
        public void AddCallbacks(IPlayer1Actions instance)
        {
            if (instance == null || m_Wrapper.m_Player1ActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_Player1ActionsCallbackInterfaces.Add(instance);
            @OnMove.started += instance.OnOnMove;
            @OnMove.performed += instance.OnOnMove;
            @OnMove.canceled += instance.OnOnMove;
            @OnJump.started += instance.OnOnJump;
            @OnJump.performed += instance.OnOnJump;
            @OnJump.canceled += instance.OnOnJump;
            @Attack.started += instance.OnAttack;
            @Attack.performed += instance.OnAttack;
            @Attack.canceled += instance.OnAttack;
        }

        private void UnregisterCallbacks(IPlayer1Actions instance)
        {
            @OnMove.started -= instance.OnOnMove;
            @OnMove.performed -= instance.OnOnMove;
            @OnMove.canceled -= instance.OnOnMove;
            @OnJump.started -= instance.OnOnJump;
            @OnJump.performed -= instance.OnOnJump;
            @OnJump.canceled -= instance.OnOnJump;
            @Attack.started -= instance.OnAttack;
            @Attack.performed -= instance.OnAttack;
            @Attack.canceled -= instance.OnAttack;
        }

        public void RemoveCallbacks(IPlayer1Actions instance)
        {
            if (m_Wrapper.m_Player1ActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(IPlayer1Actions instance)
        {
            foreach (var item in m_Wrapper.m_Player1ActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_Player1ActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public Player1Actions @Player1 => new Player1Actions(this);

    // Player2_support
    private readonly InputActionMap m_Player2_support;
    private List<IPlayer2_supportActions> m_Player2_supportActionsCallbackInterfaces = new List<IPlayer2_supportActions>();
    private readonly InputAction m_Player2_support_putFooting;
    private readonly InputAction m_Player2_support_changeKindOfFooting;
    private readonly InputAction m_Player2_support_changeLengthOfFooting;
    private readonly InputAction m_Player2_support_changeKindOfWeapon;
    public struct Player2_supportActions
    {
        private @GameInputs m_Wrapper;
        public Player2_supportActions(@GameInputs wrapper) { m_Wrapper = wrapper; }
        public InputAction @putFooting => m_Wrapper.m_Player2_support_putFooting;
        public InputAction @changeKindOfFooting => m_Wrapper.m_Player2_support_changeKindOfFooting;
        public InputAction @changeLengthOfFooting => m_Wrapper.m_Player2_support_changeLengthOfFooting;
        public InputAction @changeKindOfWeapon => m_Wrapper.m_Player2_support_changeKindOfWeapon;
        public InputActionMap Get() { return m_Wrapper.m_Player2_support; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(Player2_supportActions set) { return set.Get(); }
        public void AddCallbacks(IPlayer2_supportActions instance)
        {
            if (instance == null || m_Wrapper.m_Player2_supportActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_Player2_supportActionsCallbackInterfaces.Add(instance);
            @putFooting.started += instance.OnPutFooting;
            @putFooting.performed += instance.OnPutFooting;
            @putFooting.canceled += instance.OnPutFooting;
            @changeKindOfFooting.started += instance.OnChangeKindOfFooting;
            @changeKindOfFooting.performed += instance.OnChangeKindOfFooting;
            @changeKindOfFooting.canceled += instance.OnChangeKindOfFooting;
            @changeLengthOfFooting.started += instance.OnChangeLengthOfFooting;
            @changeLengthOfFooting.performed += instance.OnChangeLengthOfFooting;
            @changeLengthOfFooting.canceled += instance.OnChangeLengthOfFooting;
            @changeKindOfWeapon.started += instance.OnChangeKindOfWeapon;
            @changeKindOfWeapon.performed += instance.OnChangeKindOfWeapon;
            @changeKindOfWeapon.canceled += instance.OnChangeKindOfWeapon;
        }

        private void UnregisterCallbacks(IPlayer2_supportActions instance)
        {
            @putFooting.started -= instance.OnPutFooting;
            @putFooting.performed -= instance.OnPutFooting;
            @putFooting.canceled -= instance.OnPutFooting;
            @changeKindOfFooting.started -= instance.OnChangeKindOfFooting;
            @changeKindOfFooting.performed -= instance.OnChangeKindOfFooting;
            @changeKindOfFooting.canceled -= instance.OnChangeKindOfFooting;
            @changeLengthOfFooting.started -= instance.OnChangeLengthOfFooting;
            @changeLengthOfFooting.performed -= instance.OnChangeLengthOfFooting;
            @changeLengthOfFooting.canceled -= instance.OnChangeLengthOfFooting;
            @changeKindOfWeapon.started -= instance.OnChangeKindOfWeapon;
            @changeKindOfWeapon.performed -= instance.OnChangeKindOfWeapon;
            @changeKindOfWeapon.canceled -= instance.OnChangeKindOfWeapon;
        }

        public void RemoveCallbacks(IPlayer2_supportActions instance)
        {
            if (m_Wrapper.m_Player2_supportActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(IPlayer2_supportActions instance)
        {
            foreach (var item in m_Wrapper.m_Player2_supportActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_Player2_supportActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public Player2_supportActions @Player2_support => new Player2_supportActions(this);

    // Player1(debug)
    private readonly InputActionMap m_Player1debug;
    private List<IPlayer1debugActions> m_Player1debugActionsCallbackInterfaces = new List<IPlayer1debugActions>();
    private readonly InputAction m_Player1debug_OnRightMove;
    private readonly InputAction m_Player1debug_OnLeftMove;
    private readonly InputAction m_Player1debug_OnJump;
    private readonly InputAction m_Player1debug_Attack;
    public struct Player1debugActions
    {
        private @GameInputs m_Wrapper;
        public Player1debugActions(@GameInputs wrapper) { m_Wrapper = wrapper; }
        public InputAction @OnRightMove => m_Wrapper.m_Player1debug_OnRightMove;
        public InputAction @OnLeftMove => m_Wrapper.m_Player1debug_OnLeftMove;
        public InputAction @OnJump => m_Wrapper.m_Player1debug_OnJump;
        public InputAction @Attack => m_Wrapper.m_Player1debug_Attack;
        public InputActionMap Get() { return m_Wrapper.m_Player1debug; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(Player1debugActions set) { return set.Get(); }
        public void AddCallbacks(IPlayer1debugActions instance)
        {
            if (instance == null || m_Wrapper.m_Player1debugActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_Player1debugActionsCallbackInterfaces.Add(instance);
            @OnRightMove.started += instance.OnOnRightMove;
            @OnRightMove.performed += instance.OnOnRightMove;
            @OnRightMove.canceled += instance.OnOnRightMove;
            @OnLeftMove.started += instance.OnOnLeftMove;
            @OnLeftMove.performed += instance.OnOnLeftMove;
            @OnLeftMove.canceled += instance.OnOnLeftMove;
            @OnJump.started += instance.OnOnJump;
            @OnJump.performed += instance.OnOnJump;
            @OnJump.canceled += instance.OnOnJump;
            @Attack.started += instance.OnAttack;
            @Attack.performed += instance.OnAttack;
            @Attack.canceled += instance.OnAttack;
        }

        private void UnregisterCallbacks(IPlayer1debugActions instance)
        {
            @OnRightMove.started -= instance.OnOnRightMove;
            @OnRightMove.performed -= instance.OnOnRightMove;
            @OnRightMove.canceled -= instance.OnOnRightMove;
            @OnLeftMove.started -= instance.OnOnLeftMove;
            @OnLeftMove.performed -= instance.OnOnLeftMove;
            @OnLeftMove.canceled -= instance.OnOnLeftMove;
            @OnJump.started -= instance.OnOnJump;
            @OnJump.performed -= instance.OnOnJump;
            @OnJump.canceled -= instance.OnOnJump;
            @Attack.started -= instance.OnAttack;
            @Attack.performed -= instance.OnAttack;
            @Attack.canceled -= instance.OnAttack;
        }

        public void RemoveCallbacks(IPlayer1debugActions instance)
        {
            if (m_Wrapper.m_Player1debugActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(IPlayer1debugActions instance)
        {
            foreach (var item in m_Wrapper.m_Player1debugActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_Player1debugActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public Player1debugActions @Player1debug => new Player1debugActions(this);

    // Ending
    private readonly InputActionMap m_Ending;
    private List<IEndingActions> m_EndingActionsCallbackInterfaces = new List<IEndingActions>();
    private readonly InputAction m_Ending_ClickToMoveTitle;
    public struct EndingActions
    {
        private @GameInputs m_Wrapper;
        public EndingActions(@GameInputs wrapper) { m_Wrapper = wrapper; }
        public InputAction @ClickToMoveTitle => m_Wrapper.m_Ending_ClickToMoveTitle;
        public InputActionMap Get() { return m_Wrapper.m_Ending; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(EndingActions set) { return set.Get(); }
        public void AddCallbacks(IEndingActions instance)
        {
            if (instance == null || m_Wrapper.m_EndingActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_EndingActionsCallbackInterfaces.Add(instance);
            @ClickToMoveTitle.started += instance.OnClickToMoveTitle;
            @ClickToMoveTitle.performed += instance.OnClickToMoveTitle;
            @ClickToMoveTitle.canceled += instance.OnClickToMoveTitle;
        }

        private void UnregisterCallbacks(IEndingActions instance)
        {
            @ClickToMoveTitle.started -= instance.OnClickToMoveTitle;
            @ClickToMoveTitle.performed -= instance.OnClickToMoveTitle;
            @ClickToMoveTitle.canceled -= instance.OnClickToMoveTitle;
        }

        public void RemoveCallbacks(IEndingActions instance)
        {
            if (m_Wrapper.m_EndingActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(IEndingActions instance)
        {
            foreach (var item in m_Wrapper.m_EndingActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_EndingActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public EndingActions @Ending => new EndingActions(this);

    // Player1_joy
    private readonly InputActionMap m_Player1_joy;
    private List<IPlayer1_joyActions> m_Player1_joyActionsCallbackInterfaces = new List<IPlayer1_joyActions>();
    private readonly InputAction m_Player1_joy_OnMove;
    private readonly InputAction m_Player1_joy_OnJump;
    private readonly InputAction m_Player1_joy_Attack;
    public struct Player1_joyActions
    {
        private @GameInputs m_Wrapper;
        public Player1_joyActions(@GameInputs wrapper) { m_Wrapper = wrapper; }
        public InputAction @OnMove => m_Wrapper.m_Player1_joy_OnMove;
        public InputAction @OnJump => m_Wrapper.m_Player1_joy_OnJump;
        public InputAction @Attack => m_Wrapper.m_Player1_joy_Attack;
        public InputActionMap Get() { return m_Wrapper.m_Player1_joy; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(Player1_joyActions set) { return set.Get(); }
        public void AddCallbacks(IPlayer1_joyActions instance)
        {
            if (instance == null || m_Wrapper.m_Player1_joyActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_Player1_joyActionsCallbackInterfaces.Add(instance);
            @OnMove.started += instance.OnOnMove;
            @OnMove.performed += instance.OnOnMove;
            @OnMove.canceled += instance.OnOnMove;
            @OnJump.started += instance.OnOnJump;
            @OnJump.performed += instance.OnOnJump;
            @OnJump.canceled += instance.OnOnJump;
            @Attack.started += instance.OnAttack;
            @Attack.performed += instance.OnAttack;
            @Attack.canceled += instance.OnAttack;
        }

        private void UnregisterCallbacks(IPlayer1_joyActions instance)
        {
            @OnMove.started -= instance.OnOnMove;
            @OnMove.performed -= instance.OnOnMove;
            @OnMove.canceled -= instance.OnOnMove;
            @OnJump.started -= instance.OnOnJump;
            @OnJump.performed -= instance.OnOnJump;
            @OnJump.canceled -= instance.OnOnJump;
            @Attack.started -= instance.OnAttack;
            @Attack.performed -= instance.OnAttack;
            @Attack.canceled -= instance.OnAttack;
        }

        public void RemoveCallbacks(IPlayer1_joyActions instance)
        {
            if (m_Wrapper.m_Player1_joyActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(IPlayer1_joyActions instance)
        {
            foreach (var item in m_Wrapper.m_Player1_joyActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_Player1_joyActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public Player1_joyActions @Player1_joy => new Player1_joyActions(this);
    public interface IPlayer1Actions
    {
        void OnOnMove(InputAction.CallbackContext context);
        void OnOnJump(InputAction.CallbackContext context);
        void OnAttack(InputAction.CallbackContext context);
    }
    public interface IPlayer2_supportActions
    {
        void OnPutFooting(InputAction.CallbackContext context);
        void OnChangeKindOfFooting(InputAction.CallbackContext context);
        void OnChangeLengthOfFooting(InputAction.CallbackContext context);
        void OnChangeKindOfWeapon(InputAction.CallbackContext context);
    }
    public interface IPlayer1debugActions
    {
        void OnOnRightMove(InputAction.CallbackContext context);
        void OnOnLeftMove(InputAction.CallbackContext context);
        void OnOnJump(InputAction.CallbackContext context);
        void OnAttack(InputAction.CallbackContext context);
    }
    public interface IEndingActions
    {
        void OnClickToMoveTitle(InputAction.CallbackContext context);
    }
    public interface IPlayer1_joyActions
    {
        void OnOnMove(InputAction.CallbackContext context);
        void OnOnJump(InputAction.CallbackContext context);
        void OnAttack(InputAction.CallbackContext context);
    }
}
